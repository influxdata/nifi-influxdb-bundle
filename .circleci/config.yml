#
# The MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

version: 2.1

commands:
  prepare:
    description: "Prepare environment to tests"
    steps:
      - checkout
      - run: ./scripts/influxdb-restart.sh
  install-jdk:
    description: "Install jdk"
    parameters:
      jdk-version:
        type: string
        default: &default-jdk-version "8"
    steps:
      - run:
          name: Install OpenJDK << parameters.jdk-version >>
          command: |
            sudo apt-get update && sudo apt-get install openjdk-<< parameters.jdk-version >>-jdk
            sudo update-alternatives --install /usr/bin/java java /usr/lib/jvm/java-<< parameters.jdk-version >>-openjdk-amd64/bin/java 1200
            sudo update-alternatives --install /usr/bin/javac javac /usr/lib/jvm/java-<< parameters.jdk-version >>-openjdk-amd64/bin/javac 1200
            sudo update-alternatives --set java /usr/lib/jvm/java-<< parameters.jdk-version >>-openjdk-amd64/bin/java
            sudo update-alternatives --set javac /usr/lib/jvm/java-<< parameters.jdk-version >>-openjdk-amd64/bin/javac
            java -version
  client-test:
    description: "Run tests"
    parameters:
      jdk-version:
        type: string
        default: *default-jdk-version
    steps:
      - prepare
      - install-jdk:
          jdk-version: << parameters.jdk-version >>
      - restore_cache:
          name: Restoring Maven Cache
          keys:
            - &cache-key maven-cache_v1-<< parameters.jdk-version >>-{{ checksum "pom.xml" }}-{{ checksum "nifi-influx-database-nar/pom.xml" }}-{{ checksum "nifi-influx-database-serialization/pom.xml" }}-{{ checksum "nifi-influx-database-serialization-nar/pom.xml" }}-{{ checksum "nifi-influx-database-services/pom.xml" }}-{{ checksum "nifi-influx-database-services-api/pom.xml" }}-{{ checksum "nifi-influx-database-services-nar/pom.xml" }}-{{ checksum "nifi-influx-database-utils/pom.xml" }}
            - maven-cache_v1-<< parameters.jdk-version >>-
      - run:
          name: "Running tests"
          command: |
            mvn -B -U clean verify failsafe:integration-test failsafe:verify -Dmaven.buildNumber.skip=true
      - run:
          name: "Package Bundle"
          command: |
            mvn -B -U package -DskipTests
            mkdir artifacts
            cp -r nifi-influx-database-nar/target/*.nar artifacts/
      - store_artifacts:
          path: artifacts
      - save_cache:
          name: Saving Maven Cache
          key: *cache-key
          paths:
            - ~/.m2
  storing-test-results:
    steps:
      - run:
          name: "Copying test results"
          when: always
          command: |
            mkdir test-results
            mkdir test-results/nifi-influx-database-serialization
            cp -r nifi-influx-database-serialization/target/*/TEST-*.xml test-results/nifi-influx-database-serialization || true
            mkdir test-results/nifi-influx-database-services
            cp -r nifi-influx-database-services/target/*/TEST-*.xml test-results/nifi-influx-database-services || true
            mkdir test-results/nifi-influx-database-utils
            cp -r nifi-influx-database-utils/target/*/TEST-*.xml test-results/nifi-influx-database-utils || true
      - store_test_results:
          path: test-results

jobs:

  tests-java:
    machine:
      image: &default-machine-executor ubuntu-2004:202101-01
    parameters:
      jdk-version:
        type: string
        default: *default-jdk-version
    steps:
      - client-test:
          jdk-version: << parameters.jdk-version >>
      - storing-test-results
      - run:
          name: "Collecting coverage reports"
          command: bash <(curl -s https://codecov.io/bash) || echo "Codecov did not collect coverage reports"

  end-to-end:
    machine:
      image: *default-machine-executor
    steps:
      - checkout
      - install-jdk:
          jdk-version:  *default-jdk-version
      - restore_cache:
          name: Restoring Maven Cache
          keys:
            - &cache-end-to-end-key maven-cache-end-to-end_v1-{{ checksum "pom.xml" }}-{{ checksum "nifi-influx-database-nar/pom.xml" }}-{{ checksum "nifi-influx-database-serialization/pom.xml" }}-{{ checksum "nifi-influx-database-serialization-nar/pom.xml" }}-{{ checksum "nifi-influx-database-services/pom.xml" }}-{{ checksum "nifi-influx-database-services-api/pom.xml" }}-{{ checksum "nifi-influx-database-services-nar/pom.xml" }}-{{ checksum "nifi-influx-database-utils/pom.xml" }}
            - maven-cache-end-to-end_v1-
      - run: ./scripts/nifi-restart.sh
      - run: sleep 30
      - run: ./scripts/end-to-end.sh
      - save_cache:
          name: Saving Maven Cache
          key: *cache-end-to-end-key
          paths:
            - ~/.m2

  deploy:
    machine:
      image: *default-machine-executor
    steps:
      - run:
          name: Early return if this build is from a forked repository
          command: |
            if [[ $CIRCLE_PROJECT_USERNAME != "influxdata" ]]; then
              echo "Nothing to do for forked repositories, so marking this step successful"
              circleci step halt
            fi
      - checkout
      - install-jdk:
          jdk-version: *default-jdk-version
      - restore_cache:
          name: Restoring Maven Cache
          keys:
            - &cache-key-deploy maven-cache-deploy_v1-{{ checksum "pom.xml" }}-{{ checksum "nifi-influx-database-nar/pom.xml" }}-{{ checksum "nifi-influx-database-serialization/pom.xml" }}-{{ checksum "nifi-influx-database-serialization-nar/pom.xml" }}-{{ checksum "nifi-influx-database-services/pom.xml" }}-{{ checksum "nifi-influx-database-services-api/pom.xml" }}-{{ checksum "nifi-influx-database-services-nar/pom.xml" }}-{{ checksum "nifi-influx-database-utils/pom.xml" }}
            - maven-cache-deploy_v1-
      - run:
          name: Deploying Snapshot
          command: |
            ./scripts/deploy.sh
      - save_cache:
          name: Saving Maven Cache
          key: *cache-key-deploy
          paths:
            - ~/.m2

workflows:
  version: 2
  build:
    jobs:
      - tests-java:
          name: jdk-8
      - tests-java:
          name: jdk-11
          jdk-version: "11"
      - end-to-end:
          requires:
            - jdk-8
            - jdk-11
      - deploy:
          requires:
            - end-to-end
          filters:
            branches:
              only: master

  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - tests-java